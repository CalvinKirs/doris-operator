
# deploy a doris cluster
dorisCluster:
  # the name of doriscluster cluster, if not set, the chart name will be used.
  name: "doriscluster-helm"
  # the namespace of doriscluster cluster, if not set, the release namespace will be used.
  namespace: "doris"
  # annotations for doris cluster.
  annotations: {}
  # specify the cn deploy or not.
  enabledCn: true
  # specify the broker deploy or not.
  enabledBroker: true

  # specify the doriscluster adminuser or not.
  adminUser: {}
  # name: root
  # password: "12345"

dorisImage:
  feImage:
    repository: selectdb/doris.fe-ubuntu
    tag: 2.0.2
#    imagePullSecrets:
#      - name: imagePullSecret
  beImage:
    repository: selectdb/doris.be-ubuntu
    tag: 2.0.2
#    imagePullSecrets:
#      - name: imagePullSecret
  cnImage:
    repository: selectdb/doris.be-ubuntu
    tag: 2.0.2
#    imagePullSecrets:
#      - name: imagePullSecret
  brokerImage:
    repository: selectdb/doris.broker-ubuntu
    tag: 2.0.2
#    imagePullSecrets:
#      - name: imagePullSecret


service:
  feService:
    # config the service port for fe service.
    # if you want to use a dedicated port for fe service, you can config the port.
    # see https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports for more details.
    # the fe service type, only supported ClusterIP, NodePort, LoadBalancer
    type: NodePort
    servicePorts:
      - nodePort: 9030
        targetPort: 9030
      - nodePort: 8030
        targetPort: 8030
    # the loadBalancerIP for static ip config when the type=LoadBalancer and loadbalancerIp is not empty.
    # type: "LoadBalancer"
    # loadbalancerIP: "127.0.0.1"
    # use LoadBalancer on cloud platform, try to configure it using annotations，like:
    # annotations:
    #   service.beta.kubernetes.io/alibaba-cloud-loadbalancer-address-type: "intranet"
    annotations: {}
  beService:
    # config the service port for be service.
    # if you want to use a dedicated port for be service, you can config the port.
    # see https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports for more details.
    # the be service type, only supported ClusterIP, NodePort, LoadBalancer
    type: NodePort
    servicePorts:
      - nodePort: 9040
        targetPort: 9040
      - nodePort: 8040
        targetPort: 8040
    # the loadBalancerIP for static ip config when the type=LoadBalancer and loadbalancerIp is not empty.
    # type: "LoadBalancer"
    # loadbalancerIP: "127.0.0.1"
    # use LoadBalancer on cloud platform, try to configure it using annotations，like:
    # annotations:
    #   service.beta.kubernetes.io/alibaba-cloud-loadbalancer-address-type: "intranet"
    annotations: {}
  cnService:
    # config the service port for cn service.
    # if you want to use a dedicated port for cn service, you can config the port.
    # see https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports for more details.
    # the cn service type, only supported ClusterIP, NodePort, LoadBalancer
    type: NodePort
    servicePorts:
      - nodePort: 9040
        targetPort: 9040
      - nodePort: 8040
        targetPort: 8040
    # type: "LoadBalancer"
    # the loadBalancerIP for static ip config when the type=LoadBalancer and loadbalancerIp is not empty.
    # loadbalancerIP: "127.0.0.1"
    # use LoadBalancer on cloud platform, try to configure it using annotations，like:
    # annotations:
    #   service.beta.kubernetes.io/alibaba-cloud-loadbalancer-address-type: "intranet"
    annotations: {}

resource:
  # The four types of node：fe, be, cn, broker, all follow this resource configuration,
  # unless overridden one of them by the below configuration at feSpec/beSpec/cnSpec/brokerSpec.resource:
  requests:
    cpu: 8
    memory: 16Gi
    storage: 256Gi
  limits:
    cpu: 16
    memory: 32Gi
    storage: 512Gi

feSpec:
  replicas: 3
  # electionNumber represents `FOLLOWER` number, replicas - electionNumber as `OBSERVER`
  electionNumber: 3
  # the pod labels for user select or classify pods.
  labels: { }
  configMapInfo: {}
#    # configMapName specify the configmap will be used by fe, configmap must deployed in same namespace with fe.
#    configMapName: "fe-configmap"
#    # the resolveKey is fixed as "fe.conf", only when your build image as your self dockerfile.
#    resolveKey: "fe.conf"
  resource: {}
  nodeSelector: {}
    # kubernetes.io/arch: amd64
  # kubernetes.io/os: linux
  # app.kubernetes.node.name: "k8s-node1"
  env: []
    # - name: "HOME"
    #   value: "/opt/selectdb"
    # - name: HOST_IP
    #   valueFrom:
    #     fieldRef:
    #       apiVersion: v1
  #       fieldPath: status.hostIP
  affinity: {}
  # Node tolerations for fe pod scheduling to nodes with taints
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations: []
  ## hostAliases allows adding entries to /etc/hosts inside the containers
  hostAliases: []
  # - ip: "127.0.0.1"
  #   hostnames: "hostname1"
  persistentVolumes:
  # - mountPath: /opt/apache-doris/fe/doris-meta
  #   name: fe-meta
  #   persistentVolumeClaimSpec:
  #     # when use specific storageclass, the storageClassName should reConfig, example as annotation.
  #     #storageClassName: openebs-jiva-csi-default
  #     accessModes:
  #       - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 10Gi
  systemInitializationCommand: []
  # initImage: "selectdb/alpine:latest"
  # command: [ "/sbin/sysctl", "-w", "vm.max_map_count=2000000" ]

beSpec:
  replicas: 3
  # the pod labels for user select or classify pods.
  podLabels: { }
  # selectdb.app.classify: "classify-1"
  configMapInfo: {}
#    # configMapName specify the configmap will be used by fe, configmap must deployed in same namespace with fe.
#    configMapName: "be-configmap"
#    # the resolveKey is fixed as "fe.conf", only when your build image as your self dockerfile.
#    resolveKey: "be.conf"
  resource: {}
  nodeSelector: {}
    # kubernetes.io/arch: amd64
    # kubernetes.io/os: linux
  # app.kubernetes.node.name: "k8s-node1"
  env: []
    # - name: "HOME"
    #   value: "/opt/selectdb"
    # - name: HOST_IP
    #   valueFrom:
    #     fieldRef:
    #     apiVersion: v1
  #     fieldPath: status.hostIP
  affinity: {}
  # Node tolerations for fe pod scheduling to nodes with taints
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations: []
  # key: "toleration"
  # value: "master"
  ## hostAliases allows adding entries to /etc/hosts inside the containers
  hostAliases: []
  # - ip: "127.0.0.1"
  #   hostnames: "hostname1"
  persistentVolumes:
  # - mountPath: /opt/apache-doris/be/log
  #   name: be-log
  #   persistentVolumeClaimSpec:
  #     # when use specific storageclass, the storageClassName should reConfig, example as annotation.
  #     #storageClassName: openebs-jiva-csi-default
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 10Gi
  # - mountPath: /opt/apache-doris/be/storage
  #   name: be-storage
  #   persistentVolumeClaimSpec:
  #     # when use specific storageclass, the storageClassName should reConfig, example as annotation.
  #     #storageClassName: openebs-jiva-csi-default
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 1024Gi
  systemInitializationCommand: []
  # initImage: "selectdb/alpine:latest"
  # command: [ "/sbin/sysctl", "-w", "vm.max_map_count=2000000" ]


cnSpec:
  replicas: 3
  # the pod labels for user select or classify pods.
  podLabels: { }
  # selectdb.app.classify: "classify-1"
  configMapInfo: {}
#    # configMapName specify the configmap will be used by fe, configmap must deployed in same namespace with fe.
#    configMapName: "be-configmap"
#    # the resolveKey is fixed as "fe.conf", only when your build image as your self dockerfile.
#    resolveKey: "be.conf"
  resource: {}
  nodeSelector: {}
  # kubernetes.io/arch: amd64
  # kubernetes.io/os: linux
  # app.kubernetes.node.name: "k8s-node1"
  env: []
    # - name: "HOME"
    #   value: "/opt/selectdb"
    # - name: HOST_IP
  #   valueFrom:
  #     fieldRef:
  #       apiVersion: v1
  #       fieldPath: status.hostIP
  affinity: {}
  # Node tolerations for fe pod scheduling to nodes with taints
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations: []
  # key: "toleration"
  # value: "master"
  ## hostAliases allows adding entries to /etc/hosts inside the containers
  hostAliases: []
  # - ip: "127.0.0.1"
  #   hostnames: "hostname1"
  persistentVolumes:
  # - mountPath: /opt/apache-doris/be/log
  #   name: be-log
  #   persistentVolumeClaimSpec:
  #     # when use specific storageclass, the storageClassName should reConfig, example as annotation.
  #     #storageClassName: openebs-jiva-csi-default
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 10Gi
  # - mountPath: /opt/apache-doris/be/storage
  #   name: be-storage
  #   persistentVolumeClaimSpec:
  #     # when use specific storageclass, the storageClassName should reConfig, example as annotation.
  #     #storageClassName: openebs-jiva-csi-default
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 1024Gi
  systemInitializationCommand: []
  # initImage: "selectdb/alpine:latest"
  # command: [ "/sbin/sysctl", "-w", "vm.max_map_count=2000000" ]
  autoScalingPolicy:
    # version: v2
    minReplicas: 1
    maxReplicas: 4
    # hpaPolicy response to horizontlaPodAutoscaler's HorizontalPodAutoscalerSpec
    hpaPolicy:
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 30
brokerSpec:
  replicas: 3
  # the pod labels for user select or classify pods.
  podLabels: { }
  # selectdb.app.classify: "classify-1"
  configMapInfo: {}
#    # configMapName specify the configmap will be used by fe, configmap must deployed in same namespace with fe.
#    configMapName: "broker-configmap"
#    # the resolveKey is fixed as "fe.conf", only when your build image as your self dockerfile.
#    resolveKey: "broker.conf"
  resource: {}
  nodeSelector: {}
  # kubernetes.io/arch: amd64
  # kubernetes.io/os: linux
  # app.kubernetes.node.name: "k8s-node1"
  env: []
    # - name: "HOME"
    #   value: "/opt/selectdb"
  # - name: HOST_IP
  #   valueFrom:
  #     fieldRef:
  #       apiVersion: v1
  #       fieldPath: status.hostIP
  affinity: {}
  # Node tolerations for fe pod scheduling to nodes with taints
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  tolerations: []
  # - key: "toleration"
  #   value: "master"
  ## hostAliases allows adding entries to /etc/hosts inside the containers
  hostAliases: []
  # - ip: "127.0.0.1"
  #   hostnames: "hostname1"
  persistentVolumes:
  # - mountPath: /opt/apache-doris/be/log
  #   name: be-log
  #   persistentVolumeClaimSpec:
  #     # when use specific storageclass, the storageClassName should reConfig, example as annotation.
  #     #storageClassName: openebs-jiva-csi-default
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 10Gi
  # - mountPath: /opt/apache-doris/be/storage
  #   name: be-storage
  #   persistentVolumeClaimSpec:
  #     # when use specific storageclass, the storageClassName should reConfig, example as annotation.
  #     #storageClassName: openebs-jiva-csi-default
  #     accessModes:
  #     - ReadWriteOnce
  #     resources:
  #       requests:
  #         storage: 1024Gi
  systemInitializationCommand: []
  # initImage: "selectdb/alpine:latest"
  # command: [ "/sbin/sysctl", "-w", "vm.max_map_count=2000000" ]













